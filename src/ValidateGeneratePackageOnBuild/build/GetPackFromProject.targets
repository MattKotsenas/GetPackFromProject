<Project>

  <Target Name="GetPackFromProject_CollectProjectReferences">
    <ItemGroup>
      <_ProjectsToCopy Include="%(ProjectReference.Identity)" Condition="'%(ProjectReference.AddPackageAsOutput)'  == 'true'" />
    </ItemGroup>

    <Message Text="Projects to copy @(_ProjectsToCopy)" Importance="Normal" />

    <!--
      Don't run validation on inner builds because if this is an inner build, then
      by definition there was already an outer build and we don't want duplicate warnings.
    -->
    <ValidateGeneratePackageOnBuild Condition="('%(_ProjectsToCopy.Identity)' != '') AND ('$(IsInnerBuild)' != 'true')" ProjectFile="%(_ProjectsToCopy.Identity)" AttachDebugger="$(GetPackFromProject_ShouldDebug)" />
  </Target>

  <Target
    Name="GetPackFromProject_PackForMultitarget"
    DependsOnTargets="GetPackFromProject_CollectProjectReferences"
    BeforeTargets="DispatchToInnerBuilds"
    Condition="'$(GetPackFromProject_IsOuterBuild)' == 'true'">

    <!--
      Pack is an outer-build target, thus in crosstargeting / multi-targeting scenarios
      we need to call Pack ourselves. In single build scenarios, Pack will be called
      via `GeneratePackageOnBuild`.
    -->

    <!--
      Use the 'Build' target and not 'Pack' because the project may not be built yet, and Pack doesn't ensure a
      build like `dotnet build` does.
    -->
    <MSBuild Projects="%(_ProjectsToCopy.Identity)" Targets="Build" />
  </Target>

  <Target
    Name="AddProjectPackagesAsOutput"
    DependsOnTargets="GetPackFromProject_CollectProjectReferences"
    BeforeTargets="AssignTargetPaths"
    Condition="'$(GetPackFromProject_IsOuterBuild)' != 'true'">

    <!--
      TODO: Ideally we could rely on a public API and not a private target.

      We can assume at this point that the project was either built in the outer build directly,
      or as part of resolve project references for single-TFM builds.
    -->
    <MSBuild Projects="%(_ProjectsToCopy.Identity)" Targets="_GetOutputItemsFromPack">
      <Output TaskParameter="TargetOutputs" ItemName="_DependentPackageOutputs" />
    </MSBuild>

    <Message Text="Dependent TargetOutputs is '%(_DependentPackageOutputs.Identity)'" Importance="Normal" />

    <ItemGroup Condition="'@(_ProjectsToCopy)' != ''">
      <!-- Update the ProjectReference with its outputs to make finding them easier for users -->
      <ProjectReference Update="%(ProjectReference.Identity)">
        <PackageOutputs>@(_DependentPackageOutputs)</PackageOutputs>
      </ProjectReference>

      <!-- Add the .nupkg(s) as Content so users can copy them to output / embed them, etc. -->
      <Content Include="%(_DependentPackageOutputs.Identity)" Condition="'$([System.IO.Path]::GetExtension(%(_DependentPackageOutputs.Identity)))' == '.nupkg'" CopyToOutputDirectory="$(GetPackFromProject_CopyToOutputDirectory)">
        <IsPackageFromProjectReference>true</IsPackageFromProjectReference>
      </Content>
    </ItemGroup>

    <!-- Clear temp items used for batching -->
    <ItemGroup>
      <_DependentPackageOutputs Remove="*" />
    </ItemGroup>
  </Target>

</Project>
