<Project>

  <Target Name="AddProjectPackagesAsOutput" BeforeTargets="AssignTargetPaths">
    <ItemGroup>
      <_ProjectsToCopy Include="%(ProjectReference.Identity)" Condition="'%(ProjectReference.AddPackageAsOutput)'  == 'true'" />
    </ItemGroup>

    <Message Text="Projects to copy @(_ProjectsToCopy)" Importance="Low" />

    <ValidateGeneratePackageOnBuild Condition="'%(_ProjectsToCopy.Identity)' != ''" ProjectFile="%(_ProjectsToCopy.Identity)" AttachDebugger="$(GetPackFromProject_ShouldDebug)" />

    <!-- TODO: Ideally we could rely on a public API and not a private target -->
    <MSBuild Projects="%(_ProjectsToCopy.Identity)" Targets="_GetOutputItemsFromPack">
      <Output TaskParameter="TargetOutputs" ItemName="_DependentPackageOutputs" />
    </MSBuild>

    <!--
      Pack is an outer-build target. In crosstargeting / multi-targeting scenarios
      we need to call Pack ourselves. In single build scenarios, Pack will be called
      via `GeneratePackageOnBuild`.
    -->
    <PropertyGroup>
      <_GetPackFromProject_LockFile>$(IntermediateOutputPath)/GetPackFromProject.lock</_GetPackFromProject_LockFile>
    </PropertyGroup>
    <ItemGroup>
      <!-- If a build fails / fails to clean up the lock file, make sure the Clean target deletes them. -->
      <FileWrites Include="$(_GetPackFromProject_LockFile)"/>
    </ItemGroup>
    <WaitForLockFile
      LockFile="$(_GetPackFromProject_LockFile)"
      SleepSeconds="$(GetPackFromProject_LockSleepSeconds)"
      MaxRetries="$(GetPackFromProject_LockMaxRetries)"
      AttachDebugger="$(GetPackFromProject_ShouldDebug)" />
    <MSBuild Projects="%(_ProjectsToCopy.Identity)" Targets="Pack" />
    <Delete Files="$(_GetPackFromProject_LockFile)" />

    <Message Text="Dependent TargetOutputs is '%(_DependentPackageOutputs.Identity)'" Importance="Low" />

    <ItemGroup Condition="'@(_ProjectsToCopy)' != ''">
      <!-- Update the ProjectReference with its outputs to make finding them easier for users -->
      <ProjectReference Update="%(ProjectReference.Identity)">
        <PackageOutputs>@(_DependentPackageOutputs)</PackageOutputs>
      </ProjectReference>

      <!-- Add the .nupkg(s) as Content so users can copy them to output / embed them, etc. -->
      <Content Include="%(_DependentPackageOutputs.Identity)" Condition="'$([System.IO.Path]::GetExtension(%(_DependentPackageOutputs.Identity)))' == '.nupkg'" CopyToOutputDirectory="$(GetPackFromProject_CopyToOutputDirectory)">
        <IsPackageFromProjectReference>true</IsPackageFromProjectReference>
      </Content>
    </ItemGroup>

    <!-- Clear temp items used for batching -->
    <ItemGroup>
      <_DependentPackageOutputs Remove="*" />
    </ItemGroup>
  </Target>

</Project>
